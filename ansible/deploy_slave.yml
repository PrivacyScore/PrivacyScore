- hosts: all
  become: true
  become_user: root
  vars:
    ansible_ssh_pipelining: yes
  tasks:
    - name: Add contrib to sources.list
      blockinfile:
        path: /etc/apt/sources.list
        state: absent
        block: |
          deb http://192.168.122.1:3142/ftp.de.debian.org/debian/ stretch main contrib
          deb-src http://192.168.122.1:3142/ftp.de.debian.org/debian/ stretch main contrib

    - name: Install apt packages
      apt: name={{ item }} update_cache=yes cache_valid_time=1800
      with_items:
        - build-essential
        ## We surely need git to check out PrivacyScore
        - git
        ## FIXME: What do we need all the headers for?
        - libboost-python-dev
        - libffi-dev
        - libjpeg-dev
        - libleveldb1v5  # v5 on stretch
        - libleveldb-dev
        - libpq-dev
        - libssl-dev
        - libxml2-dev
        - libxslt-dev
        - ntp
        - python3
        - python3-dev
        - python3-six
        - python-dev
        - virtualenv
        - xvfb
        ## We seem to require postgresql for the Django app
        - postgresql
        ## And we need psycopg2 for ansible to interact with postgres
        - python-psycopg2

    - name: Install firefox on Debian
      apt: name={{ item }}
      with_items:
        ## This is needed by OpenWPM. Not Firefox directly,
        ## but its dependencies.  Instead of manually picking out
        ## the required libs, we simply pull firefox here.
        - firefox-esr
        # 
        # Debian has the flashplugin package in contrib.
        # Let's see whether OpenWPM installs it itself.
        # Otherwise we need to add an ansible directive to
        # add contrib.
        # - flashplugin-nonfree
      when: ansible_lsb["id"] == "Debian"

    - name: Install firefox on Ubuntu
      apt: name={{ item }}
      with_items:
        - firefox
        # - adobe-flashplugin
      when: ansible_lsb["id"] == "Ubuntu"

    - name: Add PrivacyScore Database 
      become: yes
      # FIXME: We assume the "postgres" user exists. It's probably better to soft-code that
      become_user: postgres
      # FIXME: Soft code database name
      postgresql_db:
        name: privacyscore
        state: present
        # Dunno what that does: owner: privacyscore

    - name: Add PrivacyScore Database user
      become: yes
      become_user: postgres
      # FIXME: Soft code credentials
      postgresql_user:
        name: privacyscore
        state: present
        password: privacyscore
        
    - name: Enable NTP service
      service:
        name: ntp
        state: started
        enabled: yes
    - name: Clone git repository
      git:
        repo: "{{ privacyscore__git_url }}"
        depth: 1
        dest: /opt/privacyscore
        version: "{{ privacyscore__version }}"
        accept_hostkey: yes
      notify:
        - Restart privacyscore-celery-slave.service

    - name: Create privacyscore user
      user:
        name: privacyscore
        home: /opt/privacyscore
        shell: /bin/bash
        system: yes
    - name: Set owner of privacyscore directory
      file:
        path: /opt/privacyscore
        owner: privacyscore
        group: privacyscore
        recurse: yes
    - name: Prepare privacyscore user
      become: yes
      become_user: privacyscore
      args:
        creates: /opt/privacyscore/.bashrc
      shell: |
        set -e

        cd /opt/privacyscore

        virtualenv --python $(which python3) .pyenv

        cp /etc/skel/.bashrc .
        echo ". /opt/privacyscore/.pyenv/bin/activate" >> .bashrc
        ln -sf .bashrc .bash_profile

        . /opt/privacyscore/.pyenv/bin/activate

        pip install six
        pip install -r requirements.txt
        pip install typing

        ./install-tests.sh
    - name: Place settings
      tags: ['privacyscore::settings']
      template:
        src: settings.py
        dest: /opt/privacyscore/privacyscore/settings.py
        owner: privacyscore
        group: privacyscore
        mode: 0500
      register: privacyscore__settings
      notify:
        - Restart privacyscore-celery-slave.service

    - name: Place systemd unit file for privacyscore-celery-slave
      template:
        src: privacyscore-celery-slave.service
        dest: /etc/systemd/system/privacyscore-celery-slave.service
      notify:
        - Reload systemd

    - name: Force systemd reload
      meta: flush_handlers

    - name: Enable and start celery slave service
      # when: privacyscore__is_slave | bool
      systemd:
        name: privacyscore-celery-slave
        state: started
        enabled: yes

  handlers:
    - name: Reload systemd
      systemd:
        daemon_reload: True
            
    - name: Restart privacyscore-celery-slave.service
      when: privacyscore__is_slave | bool
      systemd:
        name: privacyscore-celery-slave
        state: restarted
