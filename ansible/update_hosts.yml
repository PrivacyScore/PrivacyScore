- hosts: all
  become: true
  become_user: root
  vars:
    ansible_ssh_pipelining: yes
  tasks:
    - name: Refresh git repository
      become: yes
      become_user: privacyscore
      git:
        repo: https://github.com/PrivacyScore/PrivacyScore.git
        dest: /opt/privacyscore
        version: master

    - name: Install pip requirements
      become: yes
      become_user: privacyscore
      pip:
        requirements: /opt/privacyscore/requirements.txt
      environment:
        PATH: /opt/privacyscore/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        VIRTUAL_ENV: /opt/privacyscore/.pyenv

    - name: Install pip dev requirements
      when: privacyscore__debug | default(True)
      become: yes
      become_user: privacyscore
      pip:
        requirements: /opt/privacyscore/requirements-dev.txt
      environment:
        PATH: /opt/privacyscore/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        VIRTUAL_ENV: /opt/privacyscore/.pyenv
    - name: Install raven
      become: yes
      become_user: privacyscore
      pip:
        name: raven
      environment:
        PATH: /opt/privacyscore/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        VIRTUAL_ENV: /opt/privacyscore/.pyenv
    - name: Migrate database
      when: is_master
      become: yes
      become_user: privacyscore
      command: /opt/privacyscore/manage.py migrate
      environment:
        PATH: /opt/privacyscore/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        VIRTUAL_ENV: /opt/privacyscore/.pyenv

    - name: Collect static files
      when: privacyscore__collect_static | bool
      become: yes
      become_user: privacyscore
      tags: ['privacyscore::collectstatic']
      command: /opt/privacyscore/manage.py collectstatic --no-input
      environment:
        PATH: /opt/privacyscore/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        VIRTUAL_ENV: /opt/privacyscore/.pyenv


    - name: Install master packages
      become: yes
      when: is_master
      apt:
        name: "{{item}}"
        update_cache: yes
        cache_valid_time: 3600
      with_items:
        ## The master uses celery to communicate with the slaves.
        ## Celery in turn uses rabbitmq.
        - rabbitmq-server
        - celeryd
        ## Slaves dump their results via redis
        - redis-server

    - name: Install memcached
      when: privacyscore__install_memcache
      tags: ['privacyscore::memcache,privacyscore::memcached']
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - memcached
        - python-memcache

        
    # FIXME: Softcode vhost name
    - name: Configure RabbitMQ vhost
      become: yes
      # We assume Debian to have created this rabbitmq user...
      become_user: rabbitmq
      when: is_master
      rabbitmq_vhost:
        # FIXME: Softcode queue name
        name: privacyscore/
        state: present

    # FIXME: Softcode credentials
    - name: Configure RabbitMQ user
      become: yes
      # We assume Debian to have created this rabbitmq user...
      become_user: rabbitmq
      when: is_master
      rabbitmq_user:
        user: privacyscore
        state: present
        password: privacyscore
        vhost: privacyscore/
        configure_priv: .*
        read_priv: .*
        write_priv: .*

    # You probably want to have nginx and everything in your production environment.
    # For your test environment, you can try something like
    # ssh testhost   sudo -u privacyscore -i env PATH="/opt/privacyscore/.pyenv/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games"  VIRTUAL_ENV="/opt/privacyscore/.pyenv"  /opt/privacyscore/manage.py runserver 0:8000
    - name: Install uWSGI
      become: yes
      become_user: privacyscore
      when: is_master
      pip:
        name: uWSGI
      environment:
        PATH: /opt/privacyscore/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        VIRTUAL_ENV: /opt/privacyscore/.pyenv


#FIXME: We might as well want to check whether the rabbitmq service is running

    - name: Place systemd unit file for privacyscore-celery-master
      when: is_master
      template:
        src: privacyscore-celery-master.service
        dest: /etc/systemd/system/privacyscore-celery-master.service
    - name: Place systemd unit file for privacyscore-celery-slave
      when: is_slave
      template:
        src: privacyscore-celery-slave.service
        dest: /etc/systemd/system/privacyscore-celery-slave.service
    - name: Place systemd unit file for privacyscore
      when: is_master
      template:
        src: privacyscore.service
        dest: /etc/systemd/system/privacyscore.service

    - name: Restart privacyscore.service
      when: is_master
      systemd:
        name: privacyscore
        state: restarted
        # We might be able to only restart if anything changed...
        daemon_reload: True

    - name: Restart privacyscore-celery-master.service
      when: is_master
      systemd:
        name: privacyscore-celery-master
        state: restarted
        # We might be able to only restart if anything changed...
        daemon_reload: True

    - name: Restart privacyscore-celery-slave.service
      when: is_slave
      systemd:
        name: privacyscore-celery-slave
        state: restarted

    - name: Refresh vendor/testssl
      when: is_slave
      become: yes
      become_user: privacyscore
      git:
        repo: https://github.com/drwetter/testssl.sh.git
        dest: /opt/privacyscore/tests/vendor/testssl.sh
        version: HEAD
        depth: 1
    - name: Refresh vendor/OpenWPM
      when: is_slave
      become: yes
      become_user: privacyscore
      git:
        repo: https://github.com/citp/OpenWPM
        dest: /opt/privacyscore/tests/vendor/OpenWPM
        version: HEAD
        depth: 1
    - name: Create vendor/EasyList if it does not exist
      file:
        path: /opt/privacyscore/tests/vendor/EasyList/
        owner: privacyscore
        group: privacyscore
        mode: 0700
        state: directory
    - name: Download EasyList
      get_url:
        url: https://easylist.to/easylist/easylist.txt
        owner: privacyscore
        group: privacyscore
        dest: /opt/privacyscore/tests/vendor/EasyList/easylist.txt
        force: yes
    - name: Download EasyPrivacy
      get_url:
        url: https://easylist.to/easylist/easyprivacy.txt
        owner: privacyscore
        group: privacyscore
        dest: /opt/privacyscore/tests/vendor/EasyList/easyprivacy.txt
        force: yes
    - name: Download Fanboy Anti-Social-Media
      get_url:
        url: https://easylist.to/easylist/fanboy-annoyance.txt
        owner: privacyscore
        group: privacyscore
        dest: /opt/privacyscore/tests/vendor/EasyList/fanboy-annoyance.txt
        force: yes
    - name: Create vendor/HSTSPreload if it does not exist
      file:
        path: /opt/privacyscore/tests/vendor/HSTSPreload/
        owner: privacyscore
        group: privacyscore
        mode: 0700
        state: directory
    - name: Download HSTS Preload lists
      shell: wget https://chromium.googlesource.com/chromium/src/net/+/master/http/transport_security_state_static.json?format=TEXT -O - | base64 -d | egrep -v "^([ ]*\/\/|$)" > "/opt/privacyscore/tests/vendor/HSTSPreload/transport_security_state_static"
      args:
        executable: /bin/bash

    - name: Ensure that the raw_data directory exists
      file:
        path: /opt/privacyscore/raw_data
        owner: privacyscore
        group: privacyscore
        mode: 0700
        state: directory

    - name: Checking whether we can access the message queue
      become: yes
      become_user: privacyscore
      # FIXME: I think that we'd be better off having a switch for disabling this test
      # when: ps__test_for_message_queue
      shell:  /opt/privacyscore/.pyenv/bin/celery -A privacyscore status
      args:
          chdir:  /opt/privacyscore/
      environment:
        PATH: /opt/privacyscore/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        VIRTUAL_ENV: /opt/privacyscore/.pyenv
